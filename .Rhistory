T <- length(data)
x <- 1
for (t in 1:T) {
A <- data[[t]]
x <- x * exp(sum(theta * Feature(A))) * det(S[A, A]) / det(diag(rep(1, n)) + LFunction(theta))
}
x <- x
return(x)
}
target(c(-6, 2))
Loss(c(-6, 2))
exp(-Loss(c(-6, 2)))
# Run MH random walk.
x <- MCMC(target, c(-6, 2), MH=TRUE, 10, alpha=1)
plot(t(x), pch=16, col='black', cex=0.5)
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[,-1] != x[,1:(length(x)/2 - 1)])/(length(x) - 1)
x <- MCMC(target, c(-6, 2), MH=TRUE, 10^2, alpha=2)
plot(t(x), pch=16, col='black', cex=0.5)
sum(x[,-1] != x[,1:(length(x)/2 - 1)])/(length(x) - 1)
x <- MCMC(target, c(-6, 2), MH=TRUE, 10^2, alpha=0.5)
plot(t(x), pch=16, col='black', cex=0.5)
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[,-1] != x[,1:(length(x)/2 - 1)])/(length(x) - 1)
time <- proc.time()
x <- MCMC(target, c(-6, 2), MH=TRUE, 10^2, alpha=0.2)
proc.time() - time
plot(t(x), pch=16, col='black', cex=0.5)
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[,-1] != x[,1:(length(x)/2 - 1)])/(length(x) - 1)
k <- kde2d(x[1, ], x[2, ], n=200, lims = c(-4.3, 4, -4, 4))
image(k, col=r, xlim=c(-4.3, 4), ylim=c(-4, 4))
k <- kde2d(x[1, ], x[2, ], n=200, lims = c(-10, 4, -4, 4))
image(k, col=r, xlim=c(-10, 4), ylim=c(-4, 4))
image(k, col=r, xlim=c(-7, -3), ylim=c(-1, 3))
image(k, col=r, xlim=c(-9, -3), ylim=c(-1, 3))
time <- proc.time()
x <- MCMC(target, c(-6, 2), MH=TRUE, 10^3, alpha=0.2)
proc.time() - time
plot(t(x), pch=16, col='black', cex=0.5)
k <- kde2d(x[1, ], x[2, ], n=200, lims = c(-9, -3, -1, 3))
image(k, col=r, xlim=c(-9, -3), ylim=c(-1, 3))
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[,-1] != x[,1:(length(x)/2 - 1)])/(length(x) - 1)
log(2 * sqrt(m))
image(k, col=r, xlim=c(-9, -3), ylim=c(-1, 2))
target(c(-6, 2))
target(c(-8, 2))
target(c(-5, 0.5))
sol$estimate
plot(t(x), pch=16, col='black', cex=0.5)
plot(t(x), pch=16, col='black', cex=0.5, xlim=c(-9, -3), ylim=c(-1, 2))
x[1]
x
x[1,]
x[,1]
x2 <- MCMC(target, c(-8, 2), MH=TRUE, 10^3, alpha=0.2)
# Define the unnormalised density.
target <- function (theta) {
T <- length(data)
x <- 1
for (t in 1:T) {
A <- data[[t]]
x <- x * exp(2 * sum(theta * Feature(A))) * det(S[A, A]) / det(diag(rep(1, n)) + LFunction(theta))
}
x <- x
return(x)
}
x2 <- MCMC(target, c(-8, 2), MH=TRUE, 10^2, alpha=0.2)
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=TRUE, 10^2, alpha=0.2)
proc.time() - time
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9, -3), ylim=c(-1, 2))
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9, -3), ylim=c(0, 3))
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9, -6), ylim=c(1, 3))
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9, -6.5), ylim=c(1.5, 3))
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9, -6.5), ylim=c(1.5, 2.7))
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9, -6.5), ylim=c(1.5, 2.8))
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
x <- x2
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[,-1] != x[,1:(length(x)/2 - 1)])/(length(x) - 1)
time <- proc.time()
x <- MCMC(target, c(-8, 2), MH=TRUE, 10^2, alpha=0.1)
proc.time() - time
plot(t(x), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[,-1] != x[,1:(length(x)/2 - 1)])/(length(x) - 1)
time <- proc.time()
x <- MCMC(target, c(-8, 2), MH=TRUE, 10^3, alpha=0.1)
proc.time() - time
plot(t(x), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
sum(x[,-1] != x[,1:(length(x)/2 - 1)])/(length(x) - 1)
k <- kde2d(x[1, ], x[2, ], n=200, lims = c(-9, -3, -1, 3))
image(k, col=r, xlim=c(-9, -3), ylim=c(-1, 2))
k <- kde2d(x[1, ], x[2, ], n=200, lims = c(-9.5, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
z <- sol$estimate
point(z)
points(z)
z
points(z, pch = 3)
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z, pch = 3)
z
points(z, pch = 3, type="p")
points(z, pch = 3, type="l")
points(z, pch = 3, col="red")
plot(t(x), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
points(z, pch = 3, col="red")
z[1]
points(z[1], z[2], pch = 3, col="red")
points(z[1], z[2], pch = 4, col="red")
points(z[1], z[2], pch = 5, col="red")
points(z[1], z[2], pch = 5, lwd=2, col="red")
points(z[1], z[2], pch = 5, lwd=4, col="red")
lines(z[1])
lines(z[1], type="l", col="red")
lines(z[1], 2, type="l", col="red")
lines(c(z[1], z[1]), c(1, 3), type="l", col="red")
lines(c(-10, -6), c(z[2], z[2]), type="l", col="red")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
lines(c(z[1], z[1]), c(1, 3), type="l", col="red", lwd="2")
lines(c(-10, -6), c(z[2], z[2]), type="l", col="red", lwd="2")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
lines(c(z[1], z[1]), c(1, 3), type="l", col="red", lwd="1.5")
lines(c(-10, -6), c(z[2], z[2]), type="l", col="red", lwd="1.5")
points(z[1], z[2], pch = 5, lwd=4, col="green")
points(z[1], z[2], pch = 6, lwd=4, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch = 6, lwd=4, col="green")
points(z[1], z[2], pch=2, lwd=3, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=2, lwd=3, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=1, lwd=3, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=1, lwd=2, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=0, lwd=2, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=2, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=10, lwd=2, col="green")
points(z[1], z[2], pch=19, lwd=2, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=2, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10^2, alpha=0.1)
proc.time() - time
x2
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10^3, alpha=0.1)
proc.time() - time
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
x2
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10^3, alpha=0.1)
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10^3, alpha=0.1)
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10^2, alpha=0.1)
proc.time() - time
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
2^2
x2[,1]
x2[,2]
x2[,3]
x2[,4]
x2[,5]
x2[,20]
x2[,21]
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10, alpha=0.1)
proc.time() - time
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
x2
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10, alpha=0.1)
x2 <- MCMC(target, c(-8, 2), MH=FALSE, T=10, alpha=0.1)
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10, alpha=0.1)
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=TRUE, 10, alpha=0.1)
proc.time() - time
x2
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=TRUE, 10^2, alpha=0.1)
proc.time() - time
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[,-1] != x[,1:(length(x)/2 - 1)])/(length(x) - 1)
plot(t(x), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
plot(t(x), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
lines(c(z[1], z[1]), c(1, 3), type="l", col="red", lwd="1.5")
lines(c(-10, -6), c(z[2], z[2]), type="l", col="red", lwd="1.5")
SliceSampling(c(-8, 2), target, 0.1)
target(c(-8, 2))
target(c(-6, 2))
target(c(-5, 0.5))
# Define the unnormalised density.
target <- function (theta) {
T <- length(data)
x <- 1
for (t in 1:T) {
A <- data[[t]]
x <- x * exp(2 * sum(theta * Feature(A))) * det(S[A, A]) / det(diag(rep(1, n)) + LFunction(theta)) * 10^3
}
x <- x
return(x)
}
target(c(-8, 2))
# Define the unnormalised density.
target <- function (theta) {
T <- length(data)
x <- 1
for (t in 1:T) {
A <- data[[t]]
x <- x * exp(2 * sum(theta * Feature(A))) * det(S[A, A]) / det(diag(rep(1, n)) + LFunction(theta)) * 10^30
}
x <- x
return(x)
}
target(c(-8, 2))
# Define the unnormalised density.
target <- function (theta) {
T <- length(data)
x <- 1
for (t in 1:T) {
A <- data[[t]]
x <- x * exp(2 * sum(theta * Feature(A))) * det(S[A, A]) / det(diag(rep(1, n)) + LFunction(theta)) * 10^29
}
x <- x
return(x)
}
target(c(-8, 2))
# Define the unnormalised density.
target <- function (theta) {
T <- length(data)
x <- 1
for (t in 1:T) {
A <- data[[t]]
x <- x * exp(2 * sum(theta * Feature(A))) * det(S[A, A]) / det(diag(rep(1, n)) + LFunction(theta)) * 10^25
}
x <- x
return(x)
}
target(c(-8, 2))
# Define the unnormalised density.
target <- function (theta) {
T <- length(data)
x <- 1
for (t in 1:T) {
A <- data[[t]]
x <- x * exp(2 * sum(theta * Feature(A))) * det(S[A, A]) / det(diag(rep(1, n)) + LFunction(theta)) * 10^27
}
x <- x
return(x)
}
target(c(-8, 2))
target(c(-6, 2))
target(c(-5, 0.5))
SliceSampling(c(-8, 2), target, 0.1)
# Doing a single slice sample.
SliceSampling <- function (x, f, alpha=1) {
d <- length(x)
y <- runif(1)
# c <- RandomInterval(x, y, f, alpha)
z <- runif(d, c(-10, 0), c(-5, 4))  # runif(1, -4, 4)
while (f(z) < f(x) * y) {
# c <- RandomInterval(x, y, f, alpha)
z <- runif(d, c[, 1], c[, 2])
}
return(z)
}
SliceSampling(c(-8, 2), target, 0.1)
# Doing a single slice sample.
SliceSampling <- function (x, f, alpha=1) {
d <- length(x)
y <- runif(1)
# c <- RandomInterval(x, y, f, alpha)
z <- runif(d, c(-10, 0), c(-5, 4))  # runif(1, -4, 4)
while (f(z) < f(x) * y) {
# c <- RandomInterval(x, y, f, alpha)
# z <- runif(d, c[, 1], c[, 2])
z <- runif(d, c(-10, 0), c(-5, 4))
}
return(z)
}
SliceSampling(c(-8, 2), target, 0.1)
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=TRUE, 10, alpha=0.1)
proc.time() - time
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
x2
# Doing a single slice sample.
SliceSampling <- function (x, f, alpha=1) {
d <- length(x)
y <- runif(1)
c <- RandomInterval(x, y, f, alpha)
z <- runif(d, c[, 1], c[, 2])  # runif(1, -4, 4)
while (f(z) < f(x) * y) {
# c <- RandomInterval(x, y, f, alpha)
z <- runif(d, c[, 1], c[, 2])
# z <- runif(d, c(-10, 0), c(-5, 4))
}
return(z)
}
# Doing a single slice sample.
SliceSampling <- function (x, f, alpha=1) {
d <- length(x)
y <- runif(1)
# c <- RandomInterval(x, y, f, alpha)
z <- runif(d, c(-10, 0), c(-5, 4))  # runif(1, -4, 4)
while (f(z) < f(x) * y) {
# c <- RandomInterval(x, y, f, alpha)
# z <- runif(d, c[, 1], c[, 2])
z <- runif(d, c(-10, 0), c(-5, 4))
}
return(z)
}
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10, alpha=0.1)
# Doing a single slice sample.
SliceSampling <- function (x, f, alpha=1) {
d <- length(x)
a <- f(x)
y <- runif(1)
c <- RandomInterval(x, y, f, alpha)
z <- runif(d, c[, 1], c[, 2])  # runif(1, -4, 4)
while (f(z) < a * y) {
# c <- RandomInterval(x, y, f, alpha)
z <- runif(d, c[, 1], c[, 2])
# z <- runif(d, c(-10, 0), c(-5, 4))
}
return(z)
}
SliceSampling(c(-8, 2), target, 0.1)
RandomInterval(c(-8, 2), 0.5, target, 0.1)
SliceSampling(c(-8, 2), target, 0.1)
RandomInterval(c(-8, 2), 0.5, target, 0.1)
RandomInterval(c(-8, 2), 0.5, target, 0.1)
RandomInterval(c(-8, 2), 0.5, target, 0.1)
RandomInterval(c(-8, 2), 0.5, target, 1)
RandomInterval(c(-8, 2), 0.5, target, 1)
RandomInterval(c(-8, 2), 0.5, target, 3)
SliceSampling(c(-8, 2), target, 3)
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10, alpha=3)
proc.time() - time
x2
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 10^2, alpha=3)
proc.time() - time
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
lines(c(z[1], z[1]), c(1, 3), type="l", col="red", lwd="1.5")
lines(c(-10, -6), c(z[2], z[2]), type="l", col="red", lwd="1.5")
k <- kde2d(x2[1, ], x2[2, ], n=200, lims = c(-9.5, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[, -1] != x[, 1:(length(x)/2 - 1)])/(length(x) - 1)
SliceSampling(c(-8, 2), target, 5)
time <- proc.time()
SliceSampling(c(-8, 2), target, 5)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 3)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 10)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 1)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 4)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 4)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 3)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 3)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 3)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 5)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 5)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 5)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 4)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 4)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 4)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 4)
proc.time() - time
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 2.5 * 10^2, alpha=3)
# Define the unnormalised density.
target <- function (theta) {
T <- length(data)
x <- 1
a <- det(diag(rep(1, n)) + LFunction(theta))
for (t in 1:T) {
A <- data[[t]]
x <- x * exp(2 * sum(theta * Feature(A))) * det(S[A, A]) / a * 10^27
}
x <- x
return(x)
}
time <- proc.time()
SliceSampling(c(-8, 2), target, 4)
proc.time() - time
time <- proc.time()
SliceSampling(c(-8, 2), target, 4)
proc.time() - time
time <- proc.time()
x2 <- MCMC(target, c(-8, 2), MH=FALSE, 2.5 * 10^2, alpha=3)
proc.time() - time
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
lines(c(z[1], z[1]), c(1, 3), type="l", col="red", lwd="1.5")
lines(c(-10, -6), c(z[2], z[2]), type="l", col="red", lwd="1.5")
k <- kde2d(x2[1, ], x2[2, ], n=200, lims = c(-9.5, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
k <- kde2d(x2[1, ], x2[2, ], n=200, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-10.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
time <- proc.time()
x <- MCMC(target, c(-8, 2), MH=TRUE, 10^3, alpha=3)
proc.time() - time
plot(t(x2), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
lines(c(z[1], z[1]), c(1, 3), type="l", col="red", lwd="1.5")
lines(c(-10, -6), c(z[2], z[2]), type="l", col="red", lwd="1.5")
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[, -1] != x[, 1:(length(x)/2 - 1)])/(length(x) - 1)
time <- proc.time()
x <- MCMC(target, c(-8, 2), MH=TRUE, 10^3, alpha=0.1)
proc.time() - time
sum(x[, -1] != x[, 1:(length(x)/2 - 1)])/(length(x) - 1)
source('~/Desktop/Projekte Mathe/DPPs/GitHub/implementation-dpps/learning-toy-example-bayes.R', echo=TRUE)
plot(t(x), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
# Calculating the acceptence rate for the MH algorithm; around 25% is desired
sum(x[, -1] != x[, 1:(length(x)/2 - 1)])/(length(x) - 1)
lines(c(z[1], z[1]), c(1, 3), type="l", col="red", lwd="1.5")
lines(c(-10, -6), c(z[2], z[2]), type="l", col="red", lwd="1.5")
k <- kde2d(x[1, ], x[2, ], n=200, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-10.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
time <- proc.time()
x <- MCMC(target, c(-8, 2), MH=FALSE, 10^3, alpha=3)  # 3 or 0.1
proc.time() - time
plot(t(x), pch=16, col='black', cex=0.5, xlim=c(-9.5, -6.5), ylim=c(1.5, 2.8))
lines(c(z[1], z[1]), c(1, 3), type="l", col="red", lwd="1.5")
lines(c(-10, -6), c(z[2], z[2]), type="l", col="red", lwd="1.5")
k <- kde2d(x[1, ], x[2, ], n=200, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-10.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
k <- kde2d(x[1, ], x[2, ], n=400, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
k <- kde2d(x[1, ], x[2, ], n=1000, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
k <- kde2d(x[1, ], x[2, ], n=400, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
k <- kde2d(x[1, ], x[2, ], n=1000, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
exp(-Loss(c(-6, 2)))
target(c(-6, 2))
k <- kde2d(x[1, ], x[2, ], n=400, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
k <- kde2d(x[1, ], x[2, ], n=200, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
k <- kde2d(x[1, ], x[2, ], n=4000, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
2^2
k <- kde2d(x[1, ], x[2, ], n=600, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
2^2
k <- kde2d(x[1, ], x[2, ], n=400, lims = c(-11, -3, -1, 3))
image(k, col=r, xlim=c(-9.5, -6.3), ylim=c(1.4, 2.8))
points(z[1], z[2], pch=4, lwd=3, col="green")
2^2
