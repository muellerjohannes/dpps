plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
SamplingDPP <- function (lambda, eigenvectors) {
# First part of the algorithm, doing the selection of the eigenvectors
N = length(lambda)
J <- runif(N) <= lambda/(1 + lambda)
k <- sum(J)
V <- matrix(eigenvectors[, J], nrow=N)
Y <- rep(0, k)
# Second part of the algorithm, the big while loop
while (k > 0) {
# Calculating the weights and selecting an item i according to them
wghts <- k^(-1) * rowSums(V^2)
i <- sample(N, 1, prob=wghts)
Y[k] <- i
if (k == 1) break
# Projecting e_i onto the span of V
help <- V %*% V[i, ]
help <- sum(help^2)^(-1/2) * help
# Projecting the elements of V onto the subspace orthogonal to e_i/the projection help of e_i
V <- V - help %*% t(t(V) %*% help)
# Orthonormalize V and set near zero entries to zero
V[abs(V) < 10^(-9)] <- 0
j <- 1
while(j <= k) {
help2 <- rep(0, N)
m <- 1
while (m <= j - 1) {
help2 <- help2 + sum(V[, j] * V[, m]) * V[, m]
m <- m + 1
}
V[, j] <- V[, j] - help2
if (sum(V[, j]^2) > 0) {
V[, j] <- sum(V[, j]^2)^(-1/2) * V[, j]
}
j <- j + 1
}
V[abs(V) < 10^(-9)] <- 0
# Selecting a linear independent set in V
k <- k - 1
q <- qr(V)
V <- matrix(V[, q$pivot[seq(k)]], ncol=k)
}
return(Y)
}
# Modelling phi and q _________________________________________________________
# Points on the line.
m <- 99
n <- m + 1
q <- rep(0.01 * sqrt(m), n)
phi <- rep(0, n^2)
for (i in 1:n) {
for (j in 1:n) {
phi[(i - 1) * n + j] <- dnorm((i - j) / sqrt(m))
}
}
phi <- matrix(phi, ncol=n)
d <- length(phi) / n
for (i in 1:d) {
phi[i, ] <- sum(phi[i, ]^2)^(-1/2) * phi[i, ]
}
B <- t(phi) * q
time <- proc.time()
L <- B %*% t(B)
proc.time() - time
time <- proc.time()
edc <- eigen(L)
lambda <- edc$values
lambda[abs(lambda) < 10^(-9)] <- 0
mean <- sum(lambda / (1 + lambda))
eigenvectors <- edc$vectors
lambda2 <- rep(mean / n / (1 - mean / n), n)
eigenvectors2 <- diag(rep(1, n))
proc.time() - time
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
q <- rep(sqrt(m), n)
B <- t(phi) * q
time <- proc.time()
L <- B %*% t(B)
proc.time() - time
time <- proc.time()
edc <- eigen(L)
lambda <- edc$values
lambda[abs(lambda) < 10^(-9)] <- 0
mean <- sum(lambda / (1 + lambda))
eigenvectors <- edc$vectors
lambda2 <- rep(mean / n / (1 - mean / n), n)
eigenvectors2 <- diag(rep(1, n))
proc.time() - time
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
CoordinatesNew <- function(i, n) {
y1 <- floor((i - 1) / (n + 1))
x1 <- i - 1 - (n + 1) * y1
return (t(matrix(c(x1, y1)/n, nrow=length(i))))
}
DistanceNew <- function (i, j, n, d) {
return (sqrt(colSums((CoordinatesNew(i, n) - CoordinatesNew(j, d))^2)))
}
# Points in the square.
m <- 39
n <- (m + 1)^2
q <- rep(sqrt(m), n)
x <- ceiling(1:n^2 / n)
y <- rep(1:n, n)
time <- proc.time()
phi <- dnorm(sqrt(m) *matrix(DistanceNew(x, y, m, m), n))
proc.time() - time
d <- length(phi) / n
for (i in 1:d) {
phi[i, ] <- sum(phi[i, ]^2)^(-1/2) * phi[i, ]
}
B <- t(phi) * q
time <- proc.time()
L <- B %*% t(B)
proc.time() - time
time <- proc.time()
edc <- eigen(L)
lambda <- edc$values
lambda[abs(lambda) < 10^(-9)] <- 0
mean <- sum(lambda / (1 + lambda))
eigenvectors <- edc$vectors
lambda2 <- rep(mean / n / (1 - mean / n), n)
eigenvectors2 <- diag(rep(1, n))
proc.time() - time
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
dataPoisson <- sort(SamplingDPP(lambda2, eigenvectors2))
pointsPoisson <- t(CoordinatesNew(dataPoisson, m))
plot(pointsPoisson, xlim=0:1, ylim=0:1,
# xaxt='n', yaxt='n',
xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsPoisson, xlim=0:1, ylim=0:1,
# xaxt='n', yaxt='n',
xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
dataPoisson <- sort(SamplingDPP(lambda2, eigenvectors2))
pointsPoisson <- t(CoordinatesNew(dataPoisson, m))
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
SamplingDPP <- function (lambda, eigenvectors) {
# First part of the algorithm, doing the selection of the eigenvectors
N = length(lambda)
J <- runif(N) <= lambda/(1 + lambda)
k <- sum(J)
V <- matrix(eigenvectors[, J], nrow=N)
Y <- rep(0, k)
# Second part of the algorithm, the big while loop
while (k > 0) {
# Calculating the weights and selecting an item i according to them
wghts <- k^(-1) * rowSums(V^2)
i <- sample(N, 1, prob=wghts)
Y[k] <- i
if (k == 1) break
# Projecting e_i onto the span of V
help <- V %*% V[i, ]
help <- sum(help^2)^(-1/2) * help
# Projecting the elements of V onto the subspace orthogonal to e_i/the projection help of e_i
V <- V - help %*% t(t(V) %*% help)
# Orthonormalize V and set near zero entries to zero
V[abs(V) < 10^(-9)] <- 0
j <- 1
while(j <= k) {
help2 <- rep(0, N)
m <- 1
while (m <= j - 1) {
help2 <- help2 + sum(V[, j] * V[, m]) * V[, m]
m <- m + 1
}
V[, j] <- V[, j] - help2
if (sum(V[, j]^2) > 0) {
V[, j] <- sum(V[, j]^2)^(-1/2) * V[, j]
}
j <- j + 1
}
V[abs(V) < 10^(-9)] <- 0
# Selecting a linear independent set in V
k <- k - 1
q <- qr(V)
V <- matrix(V[, q$pivot[seq(k)]], ncol=k)
}
return(Y)
}
CoordinatesNew <- function(i, n) {
y1 <- floor((i - 1) / (n + 1))
x1 <- i - 1 - (n + 1) * y1
return (t(matrix(c(x1, y1)/n, nrow=length(i))))
}
DistanceNew <- function (i, j, n, d) {
return (sqrt(colSums((CoordinatesNew(i, n) - CoordinatesNew(j, d))^2)))
}
m <- 99
n <- m + 1
q <- rep(sqrt(m), n)
phi <- rep(0, n^2)
for (i in 1:n) {
for (j in 1:n) {
phi[(i - 1) * n + j] <- dnorm((i - j) / sqrt(m))
}
}
phi <- matrix(phi, ncol=n)
# General part.
d <- length(phi) / n
for (i in 1:d) {
phi[i, ] <- sum(phi[i, ]^2)^(-1/2) * phi[i, ]
}
B <- t(phi) * q
time <- proc.time()
L <- B %*% t(B)
proc.time() - time
time <- proc.time()
edc <- eigen(L)
lambda <- edc$values
lambda[abs(lambda) < 10^(-9)] <- 0
mean <- sum(lambda / (1 + lambda))
eigenvectors <- edc$vectors
lambda2 <- rep(mean / n / (1 - mean / n), n)
eigenvectors2 <- diag(rep(1, n))
proc.time() - time
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
pointsDPP <- SamplingDPP(lambda, eigenvectors)
pointsPoisson <- SamplingDPP(lambda2, eigenvectors2)
plot(rep(1, length(pointsDPP)), pointsDPP,
ylim=c(1, n), xlim=c(.4, 3.2), xaxt='n', ylab="Points", xlab="")
points(rep(2, length(pointsPoisson)), pointsPoisson, pch=5)
legend("topright", inset=.05, legend=c("DPP", "Poisson"), pch=c(1, 5))
m <- 39
n <- (m + 1)^2
q <- rep(sqrt(m), n)
x <- ceiling(1:n^2 / n)
y <- rep(1:n, n)
time <- proc.time()
phi <- dnorm(sqrt(m) *matrix(DistanceNew(x, y, m, m), n))
proc.time() - time
d <- length(phi) / n
for (i in 1:d) {
phi[i, ] <- sum(phi[i, ]^2)^(-1/2) * phi[i, ]
}
B <- t(phi) * q
time <- proc.time()
L <- B %*% t(B)
proc.time() - time
time <- proc.time()
edc <- eigen(L)
lambda <- edc$values
lambda[abs(lambda) < 10^(-9)] <- 0
mean <- sum(lambda / (1 + lambda))
eigenvectors <- edc$vectors
lambda2 <- rep(mean / n / (1 - mean / n), n)
eigenvectors2 <- diag(rep(1, n))
proc.time() - time
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
dataPoisson <- sort(SamplingDPP(lambda2, eigenvectors2))
pointsPoisson <- t(CoordinatesNew(dataPoisson, m))
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
dataPoisson <- sort(SamplingDPP(lambda2, eigenvectors2))
pointsPoisson <- t(CoordinatesNew(dataPoisson, m))
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
dataPoisson <- sort(SamplingDPP(lambda2, eigenvectors2))
pointsPoisson <- t(CoordinatesNew(dataPoisson, m))
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
dataPoisson <- sort(SamplingDPP(lambda2, eigenvectors2))
pointsPoisson <- t(CoordinatesNew(dataPoisson, m))
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
m <- 59
n <- (m + 1)^2
q <- rep(sqrt(m), n)
x <- ceiling(1:n^2 / n)
y <- rep(1:n, n)
time <- proc.time()
phi <- dnorm(sqrt(m) *matrix(DistanceNew(x, y, m, m), n))
proc.time() - time
d <- length(phi) / n
for (i in 1:d) {
phi[i, ] <- sum(phi[i, ]^2)^(-1/2) * phi[i, ]
}
B <- t(phi) * q
time <- proc.time()
L <- B %*% t(B)
proc.time() - time
time <- proc.time()
edc <- eigen(L)
lambda <- edc$values
lambda[abs(lambda) < 10^(-9)] <- 0
mean <- sum(lambda / (1 + lambda))
eigenvectors <- edc$vectors
lambda2 <- rep(mean / n / (1 - mean / n), n)
eigenvectors2 <- diag(rep(1, n))
proc.time() - time
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
dataPoisson <- sort(SamplingDPP(lambda2, eigenvectors2))
pointsPoisson <- t(CoordinatesNew(dataPoisson, m))
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
dataPoisson <- sort(SamplingDPP(lambda2, eigenvectors2))
pointsPoisson <- t(CoordinatesNew(dataPoisson, m))
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
# Points in the square.
m <- 69
n <- (m + 1)^2
q <- rep(sqrt(m), n)
x <- ceiling(1:n^2 / n)
y <- rep(1:n, n)
time <- proc.time()
phi <- dnorm(sqrt(m) *matrix(DistanceNew(x, y, m, m), n))
proc.time() - time
70^2
(70^2)^2
(60^2)^2
d <- length(phi) / n
for (i in 1:d) {
phi[i, ] <- sum(phi[i, ]^2)^(-1/2) * phi[i, ]
}
B <- t(phi) * q
C <- t(B) %*% B
time <- proc.time()
L <- B %*% t(B)
proc.time() - time
time <- proc.time()
edc <- eigen(L)
lambda <- edc$values
lambda[abs(lambda) < 10^(-9)] <- 0
mean <- sum(lambda / (1 + lambda))
eigenvectors <- edc$vectors
lambda2 <- rep(mean / n / (1 - mean / n), n)
eigenvectors2 <- diag(rep(1, n))
proc.time() - time
time <- proc.time()
dataDPP <- sort(SamplingDPP(lambda, eigenvectors))
pointsDPP <- t(CoordinatesNew(dataDPP, m))
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
proc.time() - time
dataPoisson <- sort(SamplingDPP(lambda2, eigenvectors2))
pointsPoisson <- t(CoordinatesNew(dataPoisson, m))
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsPoisson, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
plot(pointsDPP, xlim=0:1, ylim=0:1, xlab="", ylab="", asp=1)
