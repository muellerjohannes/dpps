hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- metropolis(x[t-1], 5)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
y <- rnorm(1, mean=5, sd=alpha)  # runif(1, x - alpha, x + alpha)
metropolis <- function(x,alpha=1){
y <- rnorm(1, mean=5, sd=alpha)  # runif(1, x - alpha, x + alpha)
if (runif(1) > target(y) / target(x)) y <- x
return(y)
}
for (t in 2:T) x[t] <- metropolis(x[t-1], 5)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- metropolis(x[t-1], 5)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- metropolis(x[t-1], 5)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
metropolis <- function(x,alpha=1){
y <- rnorm(1, mean=x, sd=alpha)  # runif(1, x - alpha, x + alpha)
if (runif(1) > target(y) / target(x)) y <- x
return(y)
}
for (t in 2:T) x[t] <- metropolis(x[t-1], 0.5)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- metropolis(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- metropolis(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
x
T <- 10
x <- rep(3.14, T)
x <- 1:10
x
x[[-1]]
x[-1]
x[1:(legth(x) - 1)]
x[1:(length(x) - 1)]
x[-1] == x[1:(length(x) - 1)]
T <- 10^5
x <- rep(3.14, T)
for (t in 2:T) x[t] <- metropolis(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] == x[1:(length(x) - 1)])
for (t in 2:T) x[t] <- metropolis(x[t-1], 2.34)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] == x[1:(length(x) - 1)])
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
for (t in 2:T) x[t] <- metropolis(x[t-1], 2.7)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
for (t in 2:T) x[t] <- metropolis(x[t-1], 3)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
for (t in 2:T) x[t] <- metropolis(x[t-1], 3)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
mcmc(x)
for (t in 2:T) x[t] <- metropolis(x[t-1], 3)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
for (t in 2:T) x[t] <- metropolis(x[t-1], .03)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
for (t in 2:T) x[t] <- metropolis(x[t-1], .3)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
for (t in 2:T) x[t] <- metropolis(x[t-1], 3)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
for (t in 2:T) x[t] <- metropolis(x[t-1], 3)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
for (t in 2:T) x[t] <- metropolis(x[t-1], 30)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
for (t in 2:T) x[t] <- metropolis(x[t-1], 3)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
runif(1)
runif(1)
z <- runif(1, 4)
?runif
z <- runif(1, 0, 4)
z <- runif(1, -4, 4)
runif(1, -4, 4)
runif(1, -4, 4)
runif(1, -4, 4)
runif(1, -4, 4)
runif(1, -4, 4)
# Now we turn towards slice sampling.
SliceSampling <- function (x) {
y <- runif(1)
z <- runif(1, -4, 4)
while (target(z) >= target(x) * y) {
z <- runif(1, -4, 4)
}
return(z)
}
SliceSampling(3)
SliceSampling(3)
SliceSampling(3)
SliceSampling(3)
SliceSampling(3)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
SliceSampling(1)
SliceSampling(1)
SliceSampling(1)
SliceSampling(1)
T <- 10^5
x <- rep(3.14, T)
T <- 10^3
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1])
T <- 10
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1])
# Now we turn towards slice sampling.
SliceSampling <- function (x) {
y <- runif(1)
z <- runif(1, -4, 4)
while (target(z) < target(x) * y) {
z <- runif(1, -4, 4)
}
return(z)
}
T <- 10
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1])
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
T <- 10^3
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1])
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
T <- 10^5
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1])
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
sum(x[-1] != x[1:(length(x) - 1)])/(T - 1)
T <- 10^4
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1])
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
T <- 10^5
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1])
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
?rexp
rexp(10)
# Proposing a random interval that includes the slice.
RandomInterval <- function (x, y, alpha=1) {
a <- rexp(1, rate=alpha)
b <- rexp(1, rate=alpha)
while (target(x - a) < target(x) * y) {
a <- 2 * a
}
while (target(x - b) < target(x) * y) {
b <- 2 * b
}
return(c(a, b))
}
# Proposing a random interval that includes the slice.
RandomInterval <- function (x, y, alpha=1) {
a <- rexp(1, rate=alpha)
b <- rexp(1, rate=alpha)
while (target(x - a) < target(x) * y) {
a <- 2 * a
}
while (target(x - b) < target(x) * y) {
b <- 2 * b
}
return(c(a, b))
}
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
RandomInterval(1, 0.3)
# Proposing a random interval that includes the slice.
RandomInterval <- function (x, y, alpha=1) {
a <- rexp(1, rate=alpha)
b <- rexp(1, rate=alpha)
while (target(x - a) < target(x) * y) {
a <- 2 * a
}
while (target(x - b) < target(x) * y) {
b <- 2 * b
}
return(c(x - a, x + b))
}
RandomInterval(1, 0.3)
# Proposing a random interval that includes the slice.
RandomInterval <- function (x, y, alpha=1) {
a <- rexp(1, rate=alpha)
b <- rexp(1, rate=alpha)
while (target(x - a) < target(x) * y) {
a <- 2 * a
}
while (target(x - b) < target(x) * y) {
b <- 2 * b
}
return(c(x - a, x + b))
}
RandomInterval(1, 0.3)
RandomInterval(1, 0.3)
# Proposing a random interval that includes the slice.
RandomInterval <- function (x, y, alpha=1) {
a <- rexp(1, rate=alpha)
b <- rexp(1, rate=alpha)
while (target(x - a) < target(x) * y) {
a <- 2 * a
}
while (target(x + b) < target(x) * y) {
b <- 2 * b
}
return(c(x - a, x + b))
}
RandomInterval(1, 0.3)
RandomInterval(1, 0.3)
RandomInterval(1, 0.3)
target <- function(x){
sin(x)^2 * sin(2 * x)^2 * dnorm(x)
}
# Proposing a random interval that includes the slice.
RandomInterval <- function (x, y, alpha=1) {
a <- rexp(1, rate=alpha)
b <- rexp(1, rate=alpha)
while (target(x - a) < target(x) * y) {
a <- 2 * a
}
while (target(x + b) < target(x) * y) {
b <- 2 * b
}
return(c(x - a, x + b))
}
RandomInterval(1, 0.3)
RandomInterval(1, 0.3)
RandomInterval(2, 0.3)
RandomInterval(2, 0.3)
RandomInterval(2, 0.03)
RandomInterval(2, 0.03)
a <- rexp(1)
b <- rexp(1)
target(x + b) < target(x) * y
target(2 + b) < target(2) * 0.03
target(2 + b) < target(2) * 0.03
target(2 + rexp(1)) < target(2) * 0.03
target(2 + rexp(1)) < target(2) * 0.03
target(2 + rexp(1)) < target(2) * 0.03
target(2 + rexp(1)) < target(2) * 0.03
target(2 + rexp(1)) < target(2) * 0.03
target(2 + rexp(1)) < target(2) * 0.03
target(2 + rexp(1)) < target(2) * 0.09
target(2 + rexp(1)) < target(2) * 0.09
target(2 + rexp(1)) < target(2) * 0.09
target(2 + rexp(1)) < target(2) * 0.09
target(2 + rexp(1)) < target(2) * 0.09
target(2 + rexp(1)) < target(2) * 0.09
target(2 + rexp(1)) < target(2) * 0.09
# Proposing a random interval that includes the slice.
RandomInterval <- function (x, y, alpha=1) {
a <- rexp(1, rate=alpha)
b <- rexp(1, rate=alpha)
while (target(x - a) < (target(x) * y)) {
a <- 2 * a
}
while (target(x + b) < (target(x) * y)) {
b <- 2 * b
}
return(c(x - a, x + b))
}
RandomInterval(2, 0.03)
target(2)
target(2)
RandomInterval(2, 0.03)
RandomInterval(2, 0.03)
RandomInterval(2, 0.03)
RandomInterval(2, 0.03)
b <- rexp(1)
x <- 2
y <- 0.03
while (target(x + b) < target(x) * y) {
b <- 2 * b
}
b
b
b <- rexp(1)
b
x <- 2
y <- 0.03
while (target(x + b) < target(x) * y) {
b <- 2 * b
}
target(x + b)
(x + b)
x
b
# Proposing a random interval that includes the slice.
RandomInterval <- function (x, y, alpha=1) {
a <- rexp(1, rate=alpha)
b <- rexp(1, rate=alpha)
while (target(x - a) >= target(x) * y) {
a <- 2 * a
}
while (target(x + b) >= target(x) * y) {
b <- 2 * b
}
return(c(x - a, x + b))
}
RandomInterval(2, 0.03)
RandomInterval(2, 0.03)
RandomInterval(2, 0.03)
RandomInterval(2, 0.03)
RandomInterval(2, 0.03)
RandomInterval(2, 0.03)
RandomInterval(2, 0.03, 4)
RandomInterval(2, 0.03, 4)
RandomInterval(2, 0.03, 4)
RandomInterval(2, 0.03, 4)
RandomInterval(2, 0.03, 4)
RandomInterval(2, 0.03, 4)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
RandomInterval(2, 0.03, 8)
c <- RandomInterval(2, 0.03, 8)
c
c[1]
c[2]
# Doing the slice sampling
SliceSampling <- function (x, alpha=1) {
y <- runif(1)
c <- RandomInterval(x, y, alpha)
z <- runif(1, c[1], c[2])  # runif(1, -4, 4)
while (target(z) < target(x) * y) {
z <- runif(1, -4, 4)
}
return(z)
}
T <- 10^3
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1])
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
T <- 10^4
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1])
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 3)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 6)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 10)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 0.1)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- f(y) / Z
lines(y, z, col="red", lwd=2)
# Computation of the actual partition function
target <- function(x){
sin(x)^2 * sin(2 * x)^2 * dnorm(x)
}
Z <- integrate(target, -100, 100)[[1]]
T <- 10^4
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- target(y) / Z
lines(y, z, col="red", lwd=2)
T <- 10^5
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- target(y) / Z
lines(y, z, col="red", lwd=2)
T <- 10^3
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- target(y) / Z
lines(y, z, col="red", lwd=2)
T <- 10^4
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
T <- 10^4
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- target(y) / Z
lines(y, z, col="red", lwd=2)
T <- 10^4
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- target(y) / Z
lines(y, z, col="red", lwd=2)
T <- 10^4
x <- rep(3.14, T)
for (t in 2:T) x[t] <- SliceSampling(x[t-1], 2)
hist(x, breaks=seq(min(x), max(x), length=100), freq=FALSE)
y <- seq(min(x), max(x), length=500)
z <- target(y) / Z
lines(y, z, col="red", lwd=2)
